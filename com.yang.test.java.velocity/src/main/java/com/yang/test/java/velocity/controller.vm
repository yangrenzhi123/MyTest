package com.xk.campushealth.web.business.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xk.campushealth.dao.I${entityName}Dao;
import com.xk.campushealth.entity.${entityName};
import com.xk.campushealth.query.${entityName}Query;
import com.xk.campushealth.support.constant.HbConstant;
import com.xk.campushealth.support.dto.DtoResult;
import com.xk.campushealth.support.dto.Pager;

@SuppressWarnings({"deprecation", "serial"})
@Controller
@RequestMapping(value = "/${smEntityName}")
public class ${entityName}Controller {

	@Autowired
	I${entityName}Dao ${smEntityName}Dao;

	@ResponseBody
	@RequestMapping(value = "/page", method = RequestMethod.GET)
	public Pager page(final ${entityName}Query query, Integer pageNow, Integer pageSize) {

		Pageable pageable = new PageRequest(pageNow, pageSize);
		Page<${entityName}> p = ${smEntityName}Dao.findAll(new Specification<${entityName}>() {
			public Predicate toPredicate(Root<${entityName}> root, CriteriaQuery<?> q, CriteriaBuilder cb) {
				List<Predicate> list = new ArrayList<Predicate>();
#foreach($column in $columns)
#if($column.type=="String")
				if (!StringUtils.isEmpty(query.${column.name})) {
					list.add(cb.like(root.get("${column.name}").as(String.class), "%" + query.${column.name} + "%"));
				}
#elseif($column.type=="Date")
				if (query.${column.name}Start != null) {
					list.add(cb.greaterThan(root.get("${column.name}").as(Date.class), query.${column.name}Start));
				}
				if (query.${column.name}End != null) {
					list.add(cb.lessThan(root.get("${column.name}").as(Date.class), query.${column.name}End));
				}
#else
				if (query.${column.name} != null) {
					list.add(cb.equal(root.get("${column.name}"), query.${column.name}));
				}
#end
#end
				Predicate[] p = new Predicate[list.size()];
				return cb.and(list.toArray(p));
			}
		}, pageable);

		Pager re = new Pager();
		re.setPageNow(pageNow);
		re.setPageSize(pageSize);
		re.setTotal(p.getTotalElements());
		re.setCode(HbConstant.RESULT_CODE_SUCCESS);
		re.setResult(p.getContent());
		return re;
	}
}